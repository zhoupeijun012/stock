const { col, Op, cast } = require("sequelize");

const template = [
  { prop: "f2", label: "最新价" },
  { prop: "f3", label: "涨跌幅" },
  { prop: "f4", label: "涨跌额" },
  { prop: "f5", label: "总手" },
  { prop: "f6", label: "成交额" },
  { prop: "f7", label: "振幅" },
  { prop: "f8", label: "换手率" },
  { prop: "f9", label: "市盈率" },
  { prop: "f10", label: "量比" },
  { prop: "f11", label: "5分钟涨跌幅" },
  { prop: "f12", label: "股票代码" },
  { prop: "f13", label: "市场" },
  { prop: "f14", label: "股票名称" },
  { prop: "f15", label: "最高价" },
  { prop: "f16", label: "最低价" },
  { prop: "f17", label: "开盘价" },
  { prop: "f18", label: "昨收" },
  { prop: "f20", label: "总市值" },
  { prop: "f21", label: "流通市值" },
  { prop: "f22", label: "涨速" },
  { prop: "f23", label: "市净率" },
  { prop: "f24", label: "60日涨跌幅" },
  { prop: "f25", label: "年初至今涨跌幅" },
  { prop: "c1", label: "交易类型" },
];
const T_CODE = [
  "513050",
  "159607",
  "159605",
  "513130",
  "513330",
  "159742",
  "513580",
  "513890",
  "513010",
  "513260",
  "513380",
  "159740",
  "159741",
  "513690",
  "513180",
  "159850",
  "513660",
  "159726",
  "513680",
  "159892",
  "513060",
  "513320",
  "513600",
  "159920",
  "513960",
  "513530",
  "159712",
  "513550",
  "159735",
  "513990",
  "513280",
  "513770",
  "159792",
  "159636",
  "513860",
  "513980",
  "513020",
  "513160",
  "159751",
  "513230",
  "159788",
  "513150",
  "513070",
  "518800",
  "518880",
  "159937",
  "518660",
  "159934",
  "518850",
  "518860",
  "159833",
  "159823",
  "159954",
  "159960",
  "510900",
  "513090",
  "513700",
  "513390",
  "159750",
  "159747",
  "513300",
  "159941",
  "513100",
  "159981",
  "511600",
  "511010",
  "159980",
  "159822",
  "511380",
  "511980",
  "511960",
  "159655",
  "513520",
  "159866",
  "513030",
  "513220",
  "159615",
  "516880",
  "159857",
  "515790",
  "560980",
  "516180",
  "159618",
  "516290",
  "159864",
  "159863",
  "159609",
  "159880",
  "159871",
  "159876",
  "512400",
  "159881",
  "516650",
  "561800",
  "159713",
  "516780",
  "159715",
  "516150",
  "159608",
  "562800",
  "562300",
  "516070",
  "560060",
  "159641",
  "159790",
  "159639",
  "561190",
  "159640",
  "562990",
  "560960",
  "159885",
  "560550",
  "159642",
  "512580",
  "159861",
  "516660",
  "515030",
  "516160",
  "516580",
  "516270",
  "159752",
  "516090",
  "159875",
  "516390",
  "159824",
  "516850",
  "159637",
  "159806",
  "515700",
  "512880",
  "159842",
  "51000",
  "513360",
  "515550",
  "159719",
  "561330",
  "562010",
  "517180",
  "516970",
  "510170",
  "517090",
  "516960",
  "510410",
  "159635",
  "159945",
  "561700",
  "560560",
  "516950",
  "159974",
  "159663",
  "159619",
  "515210",
  "516480",
  "516860",
  "515220",
  "562350",
  "561910",
  "159886",
  "561560",
  "562880",
  "515680",
  "510130",
  "159793",
  "562910",
  "516320",
  "515600",
  "515900",
  "159811",
  "159796",
  "510380",
  "159611",
  "517390",
  "512950",
  "512960",
  "159944",
  "517270",
  "159959",
  "512870",
  "159930",
  "517660",
  "512360",
  "159703",
  "159623",
  "159669",
  "562360",
  "515110",
  "517360",
  "561160",
  "562390",
  "516890",
  "517960",
  "517080",
  "159913",
  "159777",
  "515090",
  "159625",
  "513900",
  "517770",
  "517170",
  "510160",
  "515670",
  "159667",
  "561510",
  "159710",
  "512040",
  "159761",
  "560660",
  "516710",
  "562500",
  "588300",
  "510190",
  "159720",
  "159935",
  "516360",
  "159757",
  "517000",
  "512770",
  "159675",
  "159628",
  "588390",
  "159647",
  "159738",
  "517050",
  "510060",
  "510560",
  "159617",
  "159782",
  "562320",
  "159723",
  "159780",
  "159783",
  "512970",
  "515990",
  "159791",
  "517280",
  "588320",
  "517780",
  "159755",
  "159770",
  "516300",
  "510990",
  "159856",
  "517100",
  "588360",
  "515150",
  "560080",
  "516590",
  "159711",
  "159998",
  "560000",
  "159967",
  "510880",
  "512590",
  "562530",
  "517030",
  "515160",
  "515770",
  "159616",
  "510020",
  "515080",
  "562510",
  "159680",
  "516530",
  "159990",
  "515190",
  "516750",
  "515360",
  "512320",
  "560500",
  "159610",
  "512890",
  "515660",
  "159629",
  "159982",
  "159763",
  "512100",
  "159658",
  "510760",
  "560110",
  "517300",
  "159907",
  "513120",
  "159840",
  "516640",
  "517350",
  "510010",
  "562310",
  "510370",
  "516720",
  "517010",
  "588180",
  "588330",
  "588400",
  "560010",
  "159633",
  "159845",
  "159603",
  "516380",
  "517550",
  "588380",
  "513140",
  "561590",
  "588350",
  "517160",
  "517330",
  "159923",
  "515180",
  "515890",
  "561550",
  "159630",
  "159852",
  "159870",
  "510030",
  "159656",
  "562520",
  "560990",
  "159775",
  "159729",
  "159961",
  "510510",
  "512510",
  "515450",
  "159773",
  "516120",
  "561900",
  "515530",
  "515100",
  "515500",
  "159899",
  "517200",
  "512180",
  "159682",
  "516800",
  "562000",
  "515050",
  "515260",
  "512750",
  "159602",
  "510580",
  "159910",
  "159766",
  "159820",
  "159805",
  "159814",
  "510180",
  "510550",
  "159819",
  "510290",
  "512930",
  "159621",
  "159999",
  "159767",
  "159890",
  "516910",
  "515060",
  "510210",
  "562900",
  "510500",
  "512660",
  "515980",
  "516760",
  "159994",
  "159855",
  "516810",
  "159983",
  "516000",
  "159733",
  "159827",
  "516690",
  "512980",
  "516620",
  "512680",
  "159745",
  "516020",
  "516820",
  "159643",
  "159862",
  "512690",
  "159996",
  "159828",
  "515710",
  "159898",
  "561120",
  "159928",
  "516101",
  "516560",
  "159887",
  "159931",
  "159997",
  "159869",
  "159707",
  "512670",
];

class Etf extends require("./base") {
  constructor(name, template) {
    super(name, template);
  }
  async getPage(pageNum, pageSize) {
    const params = {
      np: 1,
      fltt: 1,
      invt: 2,
      cb: "cb",
      fs: "b:MK0021,b:MK0022,b:MK0023,b:MK0024,b:MK0827",
      fields: this.modelKeys.join(","),
      fid: "f3",
      pn: pageNum,
      pz: pageSize,
      po: 1,
      dect: 1,
      ut: "fa5fd1943c7b386f172d6893dbfba10b",
      wbp2u: "|0|0|0|web",
      _: Date.now(),
    };
    const res = await HTTP.get(`https://push2.eastmoney.com/api/qt/clist/get`, {
      params,
    });
    let data = res.data;
    data = data.slice(3, -2);
    data = JSON.parse(data).data || {};
    const { total, diff = [] } = data;
    diff.forEach((item) => {
      if (T_CODE.includes(item["f12"])) {
        item["c1"] = "0";
      } else {
        item["c1"] = "1";
      }
    });
    return {
      total,
      list: diff,
    };
  }
  async fetchList() {
    await this.clear();
    let pages = 1;
    let count = 200;
    try {
      for (let index = 1; index <= pages; index++) {
        const { list, total } = await this.getPage(index, count);
        await TIME_WAIT(10);
        pages = Math.ceil(total / count);
        await this.add(list);
      }
    } catch (error) {
      console.log(error.message);
    }
  }
  queryPage(params) {
    const {
      pageNum,
      pageSize,
      matchKey = [],
      orders = [],
      filters = {},
    } = params;
    const tableOrders = orders.map((item) => {
      if (item.prop == "10086") {
      } else {
        return [
          cast(col(item.prop), "SIGNED"),
          item.order == "ascending" ? "ASC" : "DESC",
        ];
      }
    });

    const whereArr = [];
    for (let key of Object.keys(filters)) {
      // 股票名称
      if (key == "c1") {
        whereArr.push({
          [key]: {
            [Op.eq]: filters[key],
          },
        });
      } else {
        whereArr.push({
          [key]: {
            [Op.like]: `%${filters[key]}%`,
          },
        });
      }
    }

    const where = {
      [Op.and]: whereArr,
    };
    return super.queryPage({
      pageNum,
      pageSize,
      matchKey,
      orders: tableOrders,
      filters: where,
    });
  }
  useRouter(app) {
    app.post("/getEtfList", async (ctx, next) => {
      try {
        let {
          pageNum,
          pageSize,
          matchKey,
          orders = [],
          filters = [],
          prompt,
        } = ctx.request.body;
        if (
          !Array.isArray(matchKey) ||
          (Array.isArray(matchKey) && matchKey.length < 0)
        ) {
          matchKey = this.modelKeys;
        }
        const data = await this.queryPage({
          pageNum,
          pageSize,
          matchKey,
          orders,
          filters,
        });

        ctx.body = {
          success: true,
          message: "成功",
          data: {
            template: prompt ? template : [],
            ...data,
          },
        };
      } catch (error) {
        ctx.body = {
          success: false,
          message: error.message,
          data: null,
        };
      }
    });
  }
}

module.exports = new Etf("Etf", template);
